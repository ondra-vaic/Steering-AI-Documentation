"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9700],{2029:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>h,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>l,toc:()=>u});var n=t(4848),r=t(8453),i=t(1470),o=t(9365),a=t(6025);const c={sidebar_position:1},d="Concepts",l={id:"getting-started/concepts",title:"Concepts",description:"This page will give you a basic introduction into most important concepts and terms.",source:"@site/docs/1_getting-started/3_concepts.mdx",sourceDirName:"1_getting-started",slug:"/getting-started/concepts",permalink:"/Steering-AI-Documentation/docs/getting-started/concepts",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Minimal Setup",permalink:"/Steering-AI-Documentation/docs/getting-started/minimal-set-up"},next:{title:"Samples",permalink:"/Steering-AI-Documentation/docs/category/samples"}},h={},u=[{value:"ECS",id:"ecs",level:2},{value:"Steering Systems",id:"steering-systems",level:2},{value:"Tags",id:"tags",level:2},{value:"Queries",id:"queries",level:2},{value:"Behaviors",id:"behaviors",level:2},{value:"Combiners",id:"combiners",level:2},{value:"Movement Systems",id:"movement-systems",level:2},{value:"Components",id:"components",level:2}];function m(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"concepts",children:"Concepts"})}),"\n",(0,n.jsx)(s.p,{children:"This page will give you a basic introduction into most important concepts and terms."}),"\n",(0,n.jsx)(s.h2,{id:"ecs",children:"ECS"}),"\n",(0,n.jsxs)(s.p,{children:["If you have never worked with Unity's ",(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/index.html",children:"ECS"}),", it might be useful to learn about the basics of this approach. The most important concepts are:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsxs)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/concepts-entities.html",children:[(0,n.jsx)(s.strong,{children:"E"}),"ntity"]})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsxs)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/concepts-components.html",children:[(0,n.jsx)(s.strong,{children:"C"}),"omponent"]})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsxs)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/concepts-systems.html",children:[(0,n.jsx)(s.strong,{children:"S"}),"ystem"]})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/systems-entityquery.html",children:"Entity Queries"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/Manual/job-system.html",children:"Jobs"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.burst@1.8/manual/index.html",children:"Burst"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/ScriptReference/Unity.Collections.NativeArray_1.html",children:"NativeArrays"})}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"steering-systems",children:"Steering Systems"}),"\n",(0,n.jsxs)(s.p,{children:["A ",(0,n.jsx)(s.strong,{children:"Steering System"})," is a Unity ",(0,n.jsx)(s.a,{href:"https://https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/systems-overview.html",children:(0,n.jsx)(s.code,{children:"System"})})," which derives from ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,n.jsx)(s.code,{children:"BaseSteeringSystem"})}),". There will typically be one implementation of ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,n.jsx)(s.code,{children:"BaseSteeringSystem"})})," per one ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/components/Tags",children:"tag"}),". ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,n.jsx)(s.code,{children:"BaseSteeringSystem"})})," is responsible for scheduling and synchornizing parallel ",(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/Manual/job-system.html",children:"Jobs"})," which determine behavior of all entities with same ",(0,n.jsx)(s.strong,{children:"Main Tag"}),". See diagram below for details on how the jobs are scheduled."]}),"\n",(0,n.jsxs)(s.p,{children:["In short, ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,n.jsx)(s.code,{children:"BaseSteeringSystem"})})," loads a ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/SteeringSystemAsset",children:(0,n.jsx)(s.code,{children:"SteeringSystemAsset"})})," at a given path and then runs all of the system's ",(0,n.jsx)(s.a,{href:"/docs/category/behaviors",children:(0,n.jsx)(s.strong,{children:"Behaviors"})})," for all entities in the scene which have the corresponding ",(0,n.jsx)(s.strong,{children:"Main Tag"})," assigned. Then, the results of behaviors are passed into a ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/combiner",children:(0,n.jsx)(s.strong,{children:"Combiner"})}),", which combines all behaviors' results into a single final ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/Combiner#desiredvelocitycomponent",children:(0,n.jsx)(s.strong,{children:"Desired Velocity"})})," which the ",(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/concepts-entities.html",children:"entity"})," wants to travel at. This is later given to the ",(0,n.jsx)(s.a,{href:"/docs/category/movement",children:(0,n.jsx)(s.strong,{children:"Movement System"})}),". The jobs are run for all entities in parallel indendent of each other."]}),"\n",(0,n.jsxs)(s.p,{children:["In ",(0,n.jsx)(s.a,{href:"/docs/getting-started/minimal-set-up",children:"Minimal Setup"}),", this was:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,n.jsx)(s.strong,{children:"Steering System"})})," - ",(0,n.jsx)(s.code,{children:"SampleSteeringSystem"})]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/SteeringSystemAsset",children:(0,n.jsx)(s.strong,{children:"Steering System Asset"})})," - ",(0,n.jsx)(s.code,{children:"SampleSteeringSystemAsset"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/editor",children:(0,n.jsx)(s.strong,{children:"Main Tag"})})," - ",(0,n.jsx)(s.code,{children:"SampleEntityTagComponent"})]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.a,{href:"/docs/category/behaviors",children:(0,n.jsx)(s.strong,{children:"Behaviors"})})," - ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/simple-behaviors/go-foward",children:(0,n.jsx)(s.code,{children:"GoForwardJobWrapper"})})]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/combiner",children:(0,n.jsx)(s.strong,{children:"Combiner"})})," - ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/Combiner",children:(0,n.jsx)(s.code,{children:"CombineVelocitiesJobWrapper"})})]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.a,{href:"/docs/category/movement",children:(0,n.jsx)(s.strong,{children:"Move System"})})," - ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/movement/0_2D-movement",children:(0,n.jsx)(s.code,{children:"Movement2DSystem"})})," (Separate system from ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,n.jsx)(s.code,{children:"BaseSteeringSystem"})}),")"]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["The following diagram visualizes the ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,n.jsx)(s.code,{children:"BaseSteeringSystem"})})," job dependency graph. It is not necessary to undestand this completely to use the framework."]}),"\n",(0,n.jsx)("p",{align:"left",children:(0,n.jsx)("img",{src:(0,a.Ay)("/img/Implementation14.svg"),alt:"Steering System Diagram",width:"650px",class:"invert-for-dark"})}),"\n",(0,n.jsxs)(s.p,{children:["First entities with the same ",(0,n.jsx)(s.strong,{children:"Main Tag"})," are queried with an ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/queries/entity-queries",children:(0,n.jsx)(s.strong,{children:"Entity Query"})}),". This is passed to all ",(0,n.jsxs)(s.strong,{children:[(0,n.jsx)(s.a,{href:"/docs/category/simple-behaviors",children:"Simple-"}),", ",(0,n.jsx)(s.a,{href:"/docs/category/neighbor-behaviors",children:"Neighbor-"}),", ",(0,n.jsx)(s.a,{href:"/docs/category/ray-behaviors",children:"Raycast Behaviors"})]}),". All ",(0,n.jsx)(s.a,{href:"/docs/category/simple-behaviors",children:(0,n.jsx)(s.strong,{children:"Simple Behaviors"})})," are simply ran in parallel and their results passed into the ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/combiner",children:(0,n.jsx)(s.strong,{children:"Combiner"})}),". For ",(0,n.jsx)(s.a,{href:"/docs/category/neighbor-behaviors",children:(0,n.jsx)(s.strong,{children:"Neighbor Behaviors"})})," and ",(0,n.jsx)(s.a,{href:"/docs/category/ray-behaviors",children:(0,n.jsx)(s.strong,{children:"Raycast Behaviors"})})," there are additional ",(0,n.jsx)(s.a,{href:"/docs/category/queries",children:(0,n.jsx)(s.strong,{children:"Queries"})})," done first. Also these behaviors can be in multiple groups based on the additional queries. After the ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/combiner",children:(0,n.jsx)(s.strong,{children:"Combiner"})})," receives results from all behaviors, it combines them into a single ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/Combiner#desiredvelocitycomponent",children:(0,n.jsx)(s.strong,{children:"Desired Velocity"})})," for each entity, which is passed into the ",(0,n.jsx)(s.a,{href:"/docs/category/movement",children:(0,n.jsx)(s.strong,{children:"Move System"})}),"."]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"tags",children:"Tags"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/components/Tags",children:"Tags"})," are ",(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/concepts-components.html",children:"ECS Components"})," with no properties. They take up no memory and in context of this framework they are used to mark which entity belongs to which Steering System. All the tags used with the framework should be marked with ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/attributes#steeringentitytagattribute",children:(0,n.jsx)(s.code,{children:"[SteeringEntityTag]"})}),"."]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"queries",children:"Queries"}),"\n",(0,n.jsxs)(s.p,{children:["There are three types of ",(0,n.jsx)(s.a,{href:"/docs/category/queries",children:"Queries"})," which you should understand. Queries collect entities or other information from the scene, and pass it to behaviors."]}),"\n",(0,n.jsxs)(i.A,{children:[(0,n.jsxs)(o.A,{value:"first",label:"Entity Queries",children:[(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/queries/entity-queries",children:(0,n.jsx)(s.strong,{children:"Entity Queries"})})," are part of Unity's ",(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/index.html",children:"ECS"}),". They find all entities in the scene which have some set of ",(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/concepts-components.html",children:"components"})," on them.\r\nIn the example, the ",(0,n.jsx)(s.code,{children:"SampleSteeringSystem"})," finds all entities which have all of the following components:"]}),(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"SampleEntityTagComponent"})," - Because it's selected as ",(0,n.jsx)(s.strong,{children:"Main Tag"})," in the ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/editor",children:"editor"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/simple-behaviors/go-foward#goforwardcomponent",children:(0,n.jsx)(s.code,{children:"GoForwardComponent"})})," - Because the used behavior, ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/simple-behaviors/go-foward",children:(0,n.jsx)(s.code,{children:"GoForwardJobWrapper"})})," depends on it."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.em,{children:["Components added by ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/steering-entity",children:(0,n.jsx)(s.code,{children:"SteeringEntityAuthoring"})})]})," - All entities used by the system must have at least these components."]}),"\n"]}),(0,n.jsxs)(s.p,{children:["(and components added by the ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/steering-entity",children:(0,n.jsx)(s.code,{children:"SteeringEntityAuthoring"})}),"). These entities are then passed to the ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/simple-behaviors/go-foward",children:(0,n.jsx)(s.code,{children:"GoForwardJobWrapper"})}),", which suggests which way each entity should go. This is the system's main entity query."]}),(0,n.jsxs)("video",{controls:!0,width:"800",children:[(0,n.jsx)("source",{src:(0,a.Ay)("/videos/SimpleDebugJob.mp4"),type:"video/mp4"}),(0,n.jsx)(s.p,{children:"Your browser does not support the video tag."})]}),(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/simple-behaviors/debug-simple",children:(0,n.jsx)(s.code,{children:"DebugSimpleJobWrapper"})})," can help you visualize the results of entity queries like in the video above."]})})]}),(0,n.jsxs)(o.A,{value:"second",label:"Neighbor Queries",children:[(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/queries/neighbor_queries/overview",children:(0,n.jsx)(s.strong,{children:"Neighbor Queries"})})," are used by ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/behaviors/neighbor-behaviors/intro",children:(0,n.jsx)(s.strong,{children:"Neighbor Behaviors"})}),". Given the results of two ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/queries/entity-queries",children:(0,n.jsx)(s.strong,{children:"Entity Queries"})}),", ",(0,n.jsx)(s.em,{children:"A"})," and ",(0,n.jsx)(s.em,{children:"B"}),", a neighbor query finds a number of it's 'neighbors' which satisfy some conditions. Normally they find ",(0,n.jsxs)(s.a,{href:"/docs/documentation-defaults/queries/neighbor-queries/kd-tree-knn",children:[(0,n.jsx)(s.em,{children:"k"})," nearest entities"]}),", but it's possible to create your ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/queries/neighbor_queries/neighbor-queries",children:"own query"}),". The neighbors are then passed into neighbor behaviors."]}),(0,n.jsxs)("video",{controls:!0,width:"800",children:[(0,n.jsx)("source",{src:(0,a.Ay)("/videos/DebugJob.mp4"),type:"video/mp4"}),(0,n.jsx)(s.p,{children:"Your browser does not support the video tag."})]}),(0,n.jsxs)(s.p,{children:["In the video, you can see each entity finds two nearest neighbors in some radius around them. Here the queries ",(0,n.jsx)(s.em,{children:"A"})," and ",(0,n.jsx)(s.em,{children:"B"})," are the same, but they generally do not have to be. ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/components/Tags",children:"Tags"})," specify which entities to look for."]}),(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/neighbor-behaviors/debug-neigbhors",children:(0,n.jsx)(s.code,{children:"DebugNeighborsJobWrapper"})})," can help you visualize the results of neighbor queries like in the video above."]})})]}),(0,n.jsxs)(o.A,{value:"third",label:"Ray Queries",children:[(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/queries/ray_queries/overview",children:(0,n.jsx)(s.strong,{children:"Ray Queries"})})," are used by ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/behaviors/ray-behaviors/overview",children:(0,n.jsx)(s.strong,{children:"Ray Behaviors"})}),". Given the results of an entity query, a ray query casts a number of rays into the world per each entity. The results of these ray casts are then passed into ray behaviors."]}),(0,n.jsxs)("video",{controls:!0,width:"800",children:[(0,n.jsx)("source",{src:(0,a.Ay)("/videos/Raycasts.mp4"),type:"video/mp4"}),(0,n.jsx)(s.p,{children:"Your browser does not support the video tag."})]}),(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/ray-behaviors/debug-rays",children:(0,n.jsx)(s.code,{children:"DebugRayJobWrapper"})})," can help you visualize the results of ray queries like in the video above."]})})]})]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"behaviors",children:"Behaviors"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/category/behaviors",children:(0,n.jsx)(s.strong,{children:"Behaviors"})})," are the main driver of what the entities do. They receive a result of the steering system's main ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/queries/entity-queries",children:"entity query"}),", and for each entity calculate one ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/Combiner#desiredvelocitycomponent",children:"desired velocity"})," to travel at. They can also receive additional information like a result of a ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/queries/neighbor_queries/overview",children:"neighbor query"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["Normally they give results of type ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,n.jsx)(s.code,{children:"VelocityResult"})})," which contains the following properties:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"float3 Direction"})," - Which direction to travel in."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"float Speed"})," - What speed to travel at."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"float DirectionDesire"})," - How much (0, 1) do we want to travel in ",(0,n.jsx)(s.code,{children:"Direction"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"float SpeedDesire"})," - How much (0, 1) do we want to travel at ",(0,n.jsx)(s.code,{children:"Speed"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"byte Priority"})," - What is the priority (0, 255) of this behavior."]}),"\n"]}),"\n",(0,n.jsxs)(i.A,{children:[(0,n.jsxs)(o.A,{value:"first",label:"Simple Behaviors",children:[(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/behaviors/simple-behaviors/overview",children:(0,n.jsx)(s.strong,{children:"Simple Behaviors"})})," are the most basic type of behaviors. They only receive results of the main entity query, and return ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,n.jsx)(s.code,{children:"VelocityResult"})})," for each entity. This is for example ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/simple-behaviors/go-foward",children:(0,n.jsx)(s.code,{children:"GoForwardJobWrapper"})})," or ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/simple-behaviors/wandering",children:(0,n.jsx)(s.code,{children:"WanderingJobWrapper"})}),"."]}),(0,n.jsxs)("video",{controls:!0,width:"800",children:[(0,n.jsx)("source",{src:(0,a.Ay)("/videos/Wandering.mp4"),type:"video/mp4"}),(0,n.jsx)(s.p,{children:"Your browser does not support the video tag."})]})]}),(0,n.jsxs)(o.A,{value:"second",label:"Neighbor Behaviors",children:[(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/behaviors/neighbor-behaviors/intro",children:(0,n.jsx)(s.strong,{children:"Neighbor Behaviors"})})," let entities react to other entities. This is useful for example for group behaviors like ",(0,n.jsx)(s.a,{href:"/docs/samples/flocking",children:"flocking"}),". These behaviors receive the results of the main query and a ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/queries/neighbor_queries/overview",children:"neighbor query"}),". Then for each entity they loop through all it's neighbors to determine a ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,n.jsx)(s.code,{children:"VelocityResult"})}),"."]}),(0,n.jsxs)("video",{controls:!0,width:"800",children:[(0,n.jsx)("source",{src:(0,a.Ay)("/videos/Cohesion.mp4"),type:"video/mp4"}),(0,n.jsx)(s.p,{children:"Your browser does not support the video tag."})]})]}),(0,n.jsxs)(o.A,{value:"third",label:"Ray Behaviors",children:[(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/behaviors/ray-behaviors/overview",children:(0,n.jsx)(s.strong,{children:"Ray Behaviors"})})," let entities react to the physical environment. This is especially useful for example for collision avoidance. These behaviors receive the results of the main query and a ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/queries/ray_queries/overview",children:"ray query"}),". Then for each entity they loop through all it's raycasts to determine a ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,n.jsx)(s.code,{children:"VelocityResult"})}),"."]}),(0,n.jsxs)("video",{controls:!0,width:"800",children:[(0,n.jsx)("source",{src:(0,a.Ay)("/videos/EnvironmentAvoidance.mp4"),type:"video/mp4"}),(0,n.jsx)(s.p,{children:"Your browser does not support the video tag."})]})]})]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"combiners",children:"Combiners"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/combiner",children:(0,n.jsx)(s.strong,{children:"Combiners"})})," tie all the ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,n.jsx)(s.code,{children:"VelocityResult"})}),"s from behaviors together at the end. Each behavior says what the entity should do. Combiners take all of the entity's ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,n.jsx)(s.code,{children:"VelocityResult"})}),"s and write to each entity's ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/Combiner#desiredvelocitycomponent",children:(0,n.jsx)(s.code,{children:"DesiredVelocityComponent"})}),"."]}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,n.jsx)(s.code,{children:"VelocityResult"})})," and ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/Combiner#desiredvelocitycomponent",children:(0,n.jsx)(s.code,{children:"DesiredVelocityComponent"})})," are types determined by ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/Combiner",children:(0,n.jsx)(s.code,{children:"CombineVelocitiesJob"})})," combiner from the ",(0,n.jsx)(s.a,{href:"/docs/category/documentation-defaults",children:"defaults library"}),". If you want to experiment with behaviors and combiners working with different types, look into implementing your own ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/combiner",children:(0,n.jsx)(s.code,{children:"ICombineJobWrapper"})}),"."]})}),"\n",(0,n.jsxs)("div",{style:{display:"flex",alignItems:"flex-end",justifyContent:"flex-start"},children:[(0,n.jsxs)("video",{controls:!0,height:"320",children:[(0,n.jsx)("source",{src:(0,a.Ay)("/videos/Combiner.mp4"),type:"video/mp4"}),(0,n.jsx)(s.p,{children:"Your browser does not support the video tag."})]}),(0,n.jsx)("div",{style:{width:"15px"}}),(0,n.jsx)("img",{src:(0,a.Ay)("/img/Combiner.png"),alt:"Description of the image",height:"305"})]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"movement-systems",children:"Movement Systems"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Movement System"})," (in the ",(0,n.jsx)(s.a,{href:"/docs/getting-started/minimal-set-up",children:"Minimal Setup"})," section ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/movement/0_2D-movement",children:(0,n.jsx)(s.code,{children:"Movement2DSystem"})}),") takes a look the entity's current velocity ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/steering-entity",children:(0,n.jsx)(s.code,{children:"VelocityComponent"})})," and ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/Combiner#desiredvelocitycomponent",children:(0,n.jsx)(s.code,{children:"DesiredVelocityComponent"})})," and calculates a new ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/steering-entity",children:(0,n.jsx)(s.code,{children:"VelocityComponent"})})," which will move the entity. They are a separate systems from implementations of ",(0,n.jsx)(s.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,n.jsx)(s.code,{children:"BaseSteeringSystem"})}),"."]}),"\n",(0,n.jsxs)("video",{controls:!0,width:"800",children:[(0,n.jsx)("source",{src:(0,a.Ay)("/videos/MovementSystem.mp4"),type:"video/mp4"}),(0,n.jsx)(s.p,{children:"Your browser does not support the video tag."})]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)(s.h2,{id:"components",children:"Components"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/docs/documentation-core/components/intro",children:(0,n.jsx)(s.strong,{children:"Components"})})," are the ",(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/concepts-components.html",children:(0,n.jsx)(s.em,{children:"C"})})," from the ",(0,n.jsx)(s.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/manual/index.html",children:"Unity's ECS"}),". They are simply data attached to entities. Here, each behavior expects that there is a component of a certain type on the entities it works with. The components parametrize the behaviors, for example how strong their influence should be. This can be done per entity. For example in the ",(0,n.jsx)(s.a,{href:"/docs/getting-started/minimal-set-up",children:"Minimal Setup"})," section, ",(0,n.jsx)(s.code,{children:"Speed"})," can be changed on the ",(0,n.jsx)(s.a,{href:"/docs/documentation-defaults/behaviors/simple-behaviors/go-foward#goforwardcomponent",children:(0,n.jsx)(s.code,{children:"GoForwardComponent"})}),", to speed up the entity."]}),"\n",(0,n.jsx)(s.hr,{})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},9365:(e,s,t)=>{t.d(s,{A:()=>o});t(6540);var n=t(4164);const r={tabItem:"tabItem_Ymn6"};var i=t(4848);function o(e){let{children:s,hidden:t,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.A)(r.tabItem,o),hidden:t,children:s})}},1470:(e,s,t)=>{t.d(s,{A:()=>w});var n=t(6540),r=t(4164),i=t(3104),o=t(6347),a=t(205),c=t(7485),d=t(1682),l=t(679);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:s,children:t}=e;return(0,n.useMemo)((()=>{const e=s??function(e){return h(e).map((e=>{let{props:{value:s,label:t,attributes:n,default:r}}=e;return{value:s,label:t,attributes:n,default:r}}))}(t);return function(e){const s=(0,d.XI)(e,((e,s)=>e.value===s.value));if(s.length>0)throw new Error(`Docusaurus error: Duplicate values "${s.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[s,t])}function m(e){let{value:s,tabValues:t}=e;return t.some((e=>e.value===s))}function p(e){let{queryString:s=!1,groupId:t}=e;const r=(0,o.W6)(),i=function(e){let{queryString:s=!1,groupId:t}=e;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:s,groupId:t});return[(0,c.aZ)(i),(0,n.useCallback)((e=>{if(!i)return;const s=new URLSearchParams(r.location.search);s.set(i,e),r.replace({...r.location,search:s.toString()})}),[i,r])]}function x(e){const{defaultValue:s,queryString:t=!1,groupId:r}=e,i=u(e),[o,c]=(0,n.useState)((()=>function(e){let{defaultValue:s,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!m({value:s,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:s,tabValues:i}))),[d,h]=p({queryString:t,groupId:r}),[x,y]=function(e){let{groupId:s}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(s),[r,i]=(0,l.Dv)(t);return[r,(0,n.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),j=(()=>{const e=d??x;return m({value:e,tabValues:i})?e:null})();(0,a.A)((()=>{j&&c(j)}),[j]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),y(e)}),[h,y,i]),tabValues:i}}var y=t(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(4848);function b(e){let{className:s,block:t,selectedValue:n,selectValue:o,tabValues:a}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),l=e=>{const s=e.currentTarget,t=c.indexOf(s),r=a[t].value;r!==n&&(d(s),o(r))},h=e=>{let s=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;s=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;s=c[t]??c[c.length-1];break}}s?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},s),children:a.map((e=>{let{value:s,label:t,attributes:i}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:n===s?0:-1,"aria-selected":n===s,ref:e=>c.push(e),onKeyDown:h,onClick:l,...i,className:(0,r.A)("tabs__item",j.tabItem,i?.className,{"tabs__item--active":n===s}),children:t??s},s)}))})}function g(e){let{lazy:s,children:t,selectedValue:i}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(s){const e=o.find((e=>e.props.value===i));return e?(0,n.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:o.map(((e,s)=>(0,n.cloneElement)(e,{key:s,hidden:e.props.value!==i})))})}function v(e){const s=x(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,f.jsx)(b,{...s,...e}),(0,f.jsx)(g,{...s,...e})]})}function w(e){const s=(0,y.A)();return(0,f.jsx)(v,{...e,children:h(e.children)},String(s))}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>a});var n=t(6540);const r={},i=n.createContext(r);function o(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);