"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[801],{7595:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>h,contentTitle:()=>s,default:()=>d,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var i=o(4848),n=o(8453);o(6025);const t={sidebar_position:1},s="INeighborBehaviorJobWrapper",a={id:"documentation-core/behaviors/neighbor-behaviors/neighbor-behaviors",title:"INeighborBehaviorJobWrapper",description:"Neighbor behaviors are implementations of INeighborBehaviorJobWrapper. The BaseSteeringSystem schedules them after their corresponding neighbor query is done, passing in its results. There are three interfaces relevant in creating a neighbor behavior. The most important one is a custom job INeighborBehaviorJob which significantly simplifies creating the behaviors.",source:"@site/docs/4_documentation-core/6_behaviors/1_neighbor-behaviors/1_neighbor-behaviors.mdx",sourceDirName:"4_documentation-core/6_behaviors/1_neighbor-behaviors",slug:"/documentation-core/behaviors/neighbor-behaviors/",permalink:"/Steering-AI-Documentation/docs/documentation-core/behaviors/neighbor-behaviors/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/Steering-AI-Documentation/docs/documentation-core/behaviors/neighbor-behaviors/intro"},next:{title:"Ray Behaviors",permalink:"/Steering-AI-Documentation/docs/category/ray-behaviors"}},h={},c=[{value:"Implementing INeighborBehaviorJobWrapper",id:"implementing-ineighborbehaviorjobwrapper",level:2},{value:"Attributes",id:"attributes",level:3},{value:"Implementing INeighborBehaviorJob&lt;C1, C2, A, R&gt;",id:"implementing-ineighborbehaviorjobc1-c2-a-r",level:2},{value:"Generic Parameters",id:"generic-parameters",level:3}];function l(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"ineighborbehaviorjobwrapper",children:"INeighborBehaviorJobWrapper"})}),"\n",(0,i.jsxs)(r.p,{children:["Neighbor behaviors are implementations of ",(0,i.jsx)(r.code,{children:"INeighborBehaviorJobWrapper"}),". The ",(0,i.jsx)(r.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,i.jsx)(r.code,{children:"BaseSteeringSystem"})})," schedules them after their corresponding ",(0,i.jsx)(r.a,{href:"/docs/documentation-core/queries/neighbor_queries/overview",children:"neighbor query"})," is done, passing in its results. There are three interfaces relevant in creating a neighbor behavior. The most important one is a ",(0,i.jsx)(r.a,{href:"https://docs.unity3d.com/Packages/com.unity.jobs@0.0/manual/custom_job_types.html",children:"custom job"})," ",(0,i.jsx)(r.code,{children:"INeighborBehaviorJob<C1, C2, A, R>"})," which significantly simplifies creating the behaviors."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/docs/documentation-core/behaviors/neighbor-behaviors/#implementing-ineighborbehaviorjobwrapper",children:(0,i.jsx)(r.code,{children:"INeighborBehaviorJobWrapper"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"Schedule"})," should schedule a job which writes ",(0,i.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,i.jsx)(r.code,{children:"VelocityResult"})}),"s to ",(0,i.jsx)(r.code,{children:"results"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/docs/documentation-core/behaviors/neighbor-behaviors/#implementing-ineighborbehaviorjobc1-c2-a-r",children:(0,i.jsx)(r.code,{children:"INeighborBehaviorJob<C1, C2, A, R>"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"Finalize"})," should return a single ",(0,i.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,i.jsx)(r.code,{children:"VelocityResult"})}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"Execute"})," runs once per each entity neighbor pair."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/docs/documentation-core/components/INeighborBaseBehavior",children:(0,i.jsx)(r.code,{children:"INeighborBaseBehavior"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Entities used by ",(0,i.jsx)(r.code,{children:"INeighborBehaviorJob<C1, C2, A, R>"})," must have a component implementing this interface."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"implementing-ineighborbehaviorjobwrapper",children:"Implementing INeighborBehaviorJobWrapper"}),"\n",(0,i.jsxs)(r.p,{children:["Below is the implementation of the ",(0,i.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/neighbor-behaviors/debug-neigbhors",children:(0,i.jsx)(r.code,{children:"DebugNeighborsJobWrapper"})}),". It can be easily used as a template to create your own behavior. The ",(0,i.jsx)(r.code,{children:"Schedule"})," method receives information about the entities as well as it's neighbors inside ",(0,i.jsx)(r.code,{children:"NeighborBehaviorParams"}),". It should allocate an object of the type specified in ",(0,i.jsx)(r.a,{href:"/docs/documentation-core/attributes#outdataattribute",children:(0,i.jsx)(r.code,{children:"[OutData]"})})," and assign it to ",(0,i.jsx)(r.code,{children:"out results"}),". The behavior should write one ",(0,i.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,i.jsx)(r.code,{children:"VelocityResult"})})," per entity into ",(0,i.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,i.jsx)(r.code,{children:"VelocityResults"})}),". Here the ",(0,i.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/neighbor-behaviors/debug-neigbhors",children:(0,i.jsx)(r.code,{children:"DebugNeighborsJob"})})," is resposible for that."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:'title="DebugNeighborsJobWrapper.cs"',children:"[JobWrapper(typeof(DebugNeighborsComponent), typeof(SteeringEntityTagComponent))]\r\n[OutData(typeof(VelocityResults))]\r\nclass DebugNeighborsJobWrapper : INeighborBehaviorJobWrapper\r\n{\r\n    public JobHandle Schedule(\r\n        SystemBase systemBase,\r\n        in NeighborBehaviorParams neighborBehaviorParams,\r\n        out IDelayedDisposable results,\r\n        in JobHandle dependency)\r\n    {\t\r\n        results = new VelocityResults(neighborBehaviorParams.BaseBehaviorParams.EntityCount);\r\n        var outDependency = new DebugNeighborsJob().Schedule<\r\n            DebugJob, \r\n            DebugNeighborsComponent, \r\n            SteeringEntityTagComponent, \r\n            NoneAccumulator, \r\n            VelocityResult>(systemBase, neighborBehaviorParams, (VelocityResults)results, 1, dependency);\r\n        return outDependency;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"attributes",children:"Attributes"}),"\n",(0,i.jsxs)(r.p,{children:["This job wrapper uses two ",(0,i.jsx)(r.a,{href:"/docs/documentation-core/attributes",children:"attributes"}),". First declares what type of object the behavior returns. Second declares which components are expected on the entity and it's neighbor. The types from the attributes are used in the ",(0,i.jsx)(r.a,{href:"/docs/documentation-core/editor",children:"editor"})," of the ",(0,i.jsx)(r.a,{href:"/docs/documentation-core/base-system/SteeringSystemAsset",children:(0,i.jsx)(r.code,{children:"SteeringSystemAsset"})}),"."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/docs/documentation-core/attributes#outdataattribute",children:(0,i.jsx)(r.code,{children:"[OutData]"})})," - Declares what type of results the behavior creates, above ",(0,i.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,i.jsx)(r.code,{children:"VelocityResults"})}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/docs/documentation-core/attributes#jobwrapperattribute",children:(0,i.jsx)(r.code,{children:"[JobWrapper]"})})," - Declares which components should be present on the entity and neighbor respectively, above ",(0,i.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/neighbor-behaviors/debug-neigbhors#debugneighborscomponent",children:(0,i.jsx)(r.code,{children:"DebugNeighborsComponent"})})," and ",(0,i.jsx)(r.a,{href:"/docs/documentation-core/base-system/steering-entity",children:(0,i.jsx)(r.code,{children:"SteeringEntityTagComponent"})}),"."]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The correct way to match the type arguments with generic parameters to ",(0,i.jsx)(r.code,{children:"INeighborBehaviorJob<C1, C2, A, R>"})," is the following:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"[JobWrapper(typeof(C1), typeof(C2))]"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.code,{children:"[OutData(typeof(R))]"})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"implementing-ineighborbehaviorjobc1-c2-a-r",children:"Implementing INeighborBehaviorJob<C1, C2, A, R>"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"INeighborBehaviorJob<C1, C2, A, R>"})," simplifies creation of new neighbor behaviors. For each entity, the ",(0,i.jsx)(r.code,{children:"Execute"})," is called up to ",(0,i.jsx)(r.code,{children:"MaxNumNeighbors"})," times, once for each neighbor. Information about the entity and it's neighbor are passed in the ",(0,i.jsx)(r.code,{children:"behaviorData"})," parameter. It has one component from both of the entities, depending on the generics. The ",(0,i.jsx)(r.code,{children:"Execute"})," method also receives reference to an ",(0,i.jsx)(r.a,{href:"/docs/documentation-core/behaviors/accumulators",children:"accumulator"}),". After influence of all neighbors is accumulated into the accumulator, it is passed with information about the entity into the ",(0,i.jsx)(r.code,{children:"Finalize"})," method. That then returns a single result of type ",(0,i.jsx)(r.code,{children:"R"})," per entity. Internally the result is then written into the ",(0,i.jsx)(r.code,{children:"results"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"generic-parameters",children:"Generic Parameters"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"C1"})," - Type of component on the main entities implements ",(0,i.jsx)(r.a,{href:"/docs/documentation-core/components/INeighborBaseBehavior",children:(0,i.jsx)(r.code,{children:"INeighborBaseBehavior"})}),"."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"C2"})," - Type of component on the neighbors."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"A"})," - Type of ",(0,i.jsx)(r.a,{href:"/docs/documentation-core/behaviors/accumulators",children:"accumulator"})," passed into the ",(0,i.jsx)(r.code,{children:"Exectute"})," method."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"R"})," - Type of result returned from the behavior."]}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:'title="DebugNeighborsJobWrapper.cs"',children:"[BurstCompile]\r\nstruct DebugNeighborsJob : INeighborBehaviorJob<\r\n    DebugNeighborsComponent, \r\n    SteeringEntityTagComponent, \r\n    NoneAccumulator, \r\n    VelocityResult>\r\n{\r\n    public void Execute(\r\n        in NeighborBehaviorData<DebugNeighborsComponent, SteeringEntityTagComponent> behaviorData,\r\n        ref NoneAccumulator accumulator)\r\n    // highlight-start\r\n    {\r\n        // Accumulate something about the neighbors into the accumulator\r\n        Debug.DrawLine(behaviorData.Entity.Position, behaviorData.OtherEntity.Position);\r\n    }\r\n    // highlight-end\r\n\r\n    // highlight-start\r\n    public VelocityResult Finalize(\r\n        in EntityInformation<DebugNeighborsComponent> entity,\r\n        in NoneAccumulator accumulator)\r\n    // highlight-start\r\n    {\r\n        // Based on the accumulator, return a VelocityResult which tells which way to go\r\n        return default;\r\n    }\r\n    // highlight-end\r\n}\n"})}),"\n",(0,i.jsx)(r.admonition,{type:"tip",children:(0,i.jsxs)(r.p,{children:["You can just copy and paste this, then change all occurences of ",(0,i.jsx)(r.code,{children:"DebugNeighbors"})," to ",(0,i.jsx)(r.code,{children:"MyBehaviorName"})," to create a new behavior quickly. The only two things to implement are the ",(0,i.jsx)(r.code,{children:"Execute"})," and ",(0,i.jsx)(r.code,{children:"Finalize"})," methods. See other ",(0,i.jsx)(r.a,{href:"/docs/category/neighbor-behaviors-1",children:"default behaviors"})," to understand more complex examples."]})})]})}function d(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,r,o)=>{o.d(r,{R:()=>s,x:()=>a});var i=o(6540);const n={},t=i.createContext(n);function s(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);