"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6018],{6631:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>h});var r=n(4848),o=n(8453);const i={sidebar_position:11},s="Attributes",a={id:"documentation-core/attributes",title:"Attributes",description:"The framework uses several attributes to achieve type safe and user friendly experience.",source:"@site/docs/4_documentation-core/11_attributes.md",sourceDirName:"4_documentation-core",slug:"/documentation-core/attributes",permalink:"/Steering-AI-Documentation/docs/documentation-core/attributes",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Editor",permalink:"/Steering-AI-Documentation/docs/documentation-core/editor"},next:{title:"Documentation Defaults",permalink:"/Steering-AI-Documentation/docs/category/documentation-defaults"}},c={},h=[{value:"SteeringEntityTagAttribute",id:"steeringentitytagattribute",level:2},{value:"JobWrapperAttribute",id:"jobwrapperattribute",level:2},{value:"OutDataAttribute",id:"outdataattribute",level:2},{value:"ComponentAuthoringAttribute",id:"componentauthoringattribute",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"attributes",children:"Attributes"})}),"\n",(0,r.jsxs)(t.p,{children:["The framework uses several ",(0,r.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/attributes",children:"attributes"})," to achieve type safe and user friendly experience."]}),"\n",(0,r.jsx)(t.h2,{id:"steeringentitytagattribute",children:"SteeringEntityTagAttribute"}),"\n",(0,r.jsxs)(t.p,{children:["Marks a ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/components/Tags",children:"tag component"})," to show up in the ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/editor",children:"editor window"})," for ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/base-system/SteeringSystemAsset",children:(0,r.jsx)(t.code,{children:"SteeringSystemAsset"})})," and inspector of ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/base-system/SteeringSystemAsset",children:(0,r.jsx)(t.code,{children:"SteeringSystemAsset"})}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:'title="SampleEntityTag.cs"',children:"// highlight-next-line\r\n[SteeringEntityTag] // Lets the editor find this tag. \r\npublic struct SampleEntityTagComponent : IComponentData {}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"jobwrapperattribute",children:"JobWrapperAttribute"}),"\n",(0,r.jsxs)(t.p,{children:["Declares that a job wrapper requires an entity to have a specific ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/components/intro",children:"component"}),". Used when implementing a ",(0,r.jsx)(t.a,{href:"/docs/category/behaviors",children:"behavior"}),", ",(0,r.jsx)(t.a,{href:"/docs/category/queries",children:"query"})," or a ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/combiner#attributes",children:"combiner"}),". In case of ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/behaviors/neighbor-behaviors/",children:(0,r.jsx)(t.code,{children:"INeighborBehaviorJobWrapper"})}),", the second parameter declares which component the neighbor should have. There are also overloads to handle arrays of components. The component dependencies can then be displayed and resolved in the ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/editor",children:"editor"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:'title="MultiHomingJobWrapper.cs"',children:"// highlight-next-line\r\n// Lets the editor know that main entities need MultiHomingComponent and neighbors need HomeComponent\r\n// highlight-next-line\r\n[JobWrapper(typeof(MultiHomingComponent), typeof(HomeComponent))]\r\npublic class MultiHomingJobWrapper : INeighborBehaviorJobWrapper { }\n"})}),"\n",(0,r.jsx)(t.h2,{id:"outdataattribute",children:"OutDataAttribute"}),"\n",(0,r.jsxs)(t.p,{children:["This attribute should mark all ",(0,r.jsx)(t.a,{href:"/docs/category/behaviors",children:"behavior"})," job wrappers and the ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/combiner",children:"combiner"}),". For behaviors, it declares type of data structure the behavior allocates and writes results to. In case of the combiner, it declares which type(s) of data structure(s) returned from the behavior job wrappers it can accept. After selecting a combiner in the ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/editor",children:"editor"}),", all dropdowns are refreshed to only offer behaviors whose output result type is compatible with the combiner."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:'title="MultiHomingJobWrapper.cs"',children:"// highlight-next-line\r\n// Lets the editor know that this behavior outputs VelocityResults\r\n// highlight-next-line\r\n[OutData(typeof(VelocityResults))]\r\npublic class MultiHomingJobWrapper : INeighborBehaviorJobWrapper { }\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:'title="CombineVelocitiesJobWrapper.cs"',children:"// highlight-next-line\r\n// Lets the editor know that this combiner accepts VelocityResults\r\n// highlight-next-line\r\n[OutData(typeof(VelocityResults))]\r\npublic class CombineVelocitiesJobWrapper : ICombineJobWrapper { }\n"})}),"\n",(0,r.jsx)(t.h2,{id:"componentauthoringattribute",children:"ComponentAuthoringAttribute"}),"\n",(0,r.jsxs)(t.p,{children:["Declares that a ",(0,r.jsx)(t.a,{href:"https://docs.unity3d.com/ScriptReference/MonoBehaviour.html",children:(0,r.jsx)(t.code,{children:"MonoBehaviour"})})," authoring ",(0,r.jsx)(t.code,{children:"X"})," authors a specific ",(0,r.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.entities@1.3/api/Unity.Entities.IComponentData.html",children:(0,r.jsx)(t.code,{children:"IComponentData"})})," component ",(0,r.jsx)(t.code,{children:"T"}),". When the ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/editor",children:"editor"})," shows that there is a missing ",(0,r.jsx)(t.a,{href:"/docs/documentation-core/components/intro",children:"component"})," of type ",(0,r.jsx)(t.code,{children:"T"})," on the entity, it can find the authoring ",(0,r.jsx)(t.code,{children:"X"})," which declares authoring ",(0,r.jsx)(t.code,{children:"T"}),". When the plus or minus is clicked on the component ",(0,r.jsx)(t.code,{children:"T"}),", the editor knows it should add or remove ",(0,r.jsx)(t.code,{children:"X"})," from the entity."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",metastring:'title="DebugSimpleAuthoring.cs"',children:"// highlight-next-line\r\n// Lets the editor match `DebugSimpleAuthoring` with `DebugSimpleComponent`\r\n// highlight-next-line\r\n[ComponentAuthoring(typeof(DebugSimpleComponent))]\r\npublic class DebugSimpleAuthoring : MonoBehaviour\r\n{\r\n    public DebugSimpleComponent DebugSimpleComponent;\r\n}\n"})})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(6540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);