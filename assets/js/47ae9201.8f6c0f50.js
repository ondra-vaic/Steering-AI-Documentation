"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8710],{845:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>n,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var s=r(4848),o=r(8453);r(6025);const i={sidebar_position:9},n="Merger",c={id:"documentation-core/merger",title:"Merger",description:"Merger is an implementation of IMergeJobWrapper. It is the last step that the BaseSteeringSystem does. Its resposibility is to for each entity, take all its results from all the system's behaviors and turn it into one final result for one of the movement systems. By default, this is:",source:"@site/docs/4_documentation-core/9_merger.mdx",sourceDirName:"4_documentation-core",slug:"/documentation-core/merger",permalink:"/docs/documentation-core/merger",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"IAccumulator",permalink:"/docs/documentation-core/behaviors/accumulators"},next:{title:"Editor",permalink:"/docs/documentation-core/editor"}},a={},d=[{value:"Attributes",id:"attributes",level:2},{value:"Behavior - Merger Compatibility",id:"behavior---merger-compatibility",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"merger",children:"Merger"})}),"\n",(0,s.jsxs)(t.p,{children:["Merger is an implementation of ",(0,s.jsx)(t.code,{children:"IMergeJobWrapper"}),". It is the last step that the ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,s.jsx)(t.code,{children:"BaseSteeringSystem"})})," does. Its resposibility is to for each entity, take all its ",(0,s.jsx)(t.strong,{children:"results"})," from all the system's ",(0,s.jsx)(t.a,{href:"/docs/category/behaviors",children:"behaviors"})," and turn it into one ",(0,s.jsx)(t.strong,{children:"final result"})," for one of the ",(0,s.jsx)(t.a,{href:"/docs/category/movement",children:"movement systems"}),". By default, this is:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,s.jsx)(t.code,{children:"VelocityResult"})})," - ",(0,s.jsx)(t.strong,{children:"Result"})," which behaviors output per entity."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/Merger#desiredvelocitycomponent",children:(0,s.jsx)(t.code,{children:"DesiredVelocityComponent"})})," - ",(0,s.jsx)(t.strong,{children:"Final result"})," attached as component on the entity telling the movement system where the entity wants to go."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/Merger",children:(0,s.jsx)(t.code,{children:"CombineVelocitiesJobWrapper"})})," - Implementation of ",(0,s.jsx)(t.code,{children:"IMergeJobWrapper"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["It is however entirely possible to use your own types instead of ",(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,s.jsx)(t.code,{children:"VelocityResult"})})," and ",(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/Merger#desiredvelocitycomponent",children:(0,s.jsx)(t.code,{children:"DesiredVelocityComponent"})}),". The implementation should declare the types it works with using ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/attributes",children:"attributes"}),". For example this is the declaration of ",(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/Merger",children:(0,s.jsx)(t.code,{children:"CombineVelocitiesJobWrapper"})}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",metastring:'title="CombineVelocitiesJobWrapper.cs"',children:"[JobWrapper(typeof(DesiredVelocityComponent))]\r\n[OutData(typeof(VelocityResults))]\r\npublic class CombineVelocitiesJobWrapper : IMergeJobWrapper\r\n{\r\n    public JobHandle Schedule(\r\n        SystemBase system,\r\n        in BaseBehaviorParams mainBaseParams,\r\n        in IDelayedDisposable[] results,\r\n        JobHandle dependency) { ... }\r\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The interface receives an array of data structures containing ",(0,s.jsx)(t.strong,{children:"results"}),". The ",(0,s.jsx)(t.strong,{children:"results"})," should be castable into whichever type is declared in the ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/attributes#outdataattribute",children:(0,s.jsx)(t.code,{children:"[OutData]"})})," attribute. For example in ",(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/Merger",children:(0,s.jsx)(t.code,{children:"CombineVelocitiesJobWrapper"})}),", they are cast into ",(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,s.jsx)(t.code,{children:"VelocityResults"})})," which is just a wrapper struct for ",(0,s.jsx)(t.code,{children:"NativeArray<VelocityResult>"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"attributes",children:"Attributes"}),"\n",(0,s.jsxs)(t.p,{children:["This job wrapper uses two ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/attributes",children:"attributes"}),". First declares what type of objects the merger accepts. Second declares which components are expected on the entity. The types from the ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/attributes",children:"attributes"})," are used in the ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/editor",children:"editor"})," of the ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/base-system/SteeringSystemAsset",children:(0,s.jsx)(t.code,{children:"SteeringSystemAsset"})}),"."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/docs/documentation-core/attributes#outdataattribute",children:(0,s.jsx)(t.code,{children:"[OutData]"})})," - Declares the type of ",(0,s.jsx)(t.strong,{children:"results"})," the merger accepts ",(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,s.jsx)(t.code,{children:"VelocityResults"})}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"/docs/documentation-core/attributes#jobwrapperattribute",children:(0,s.jsx)(t.code,{children:"[JobWrapper]"})})," - Declares the type of ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/components/intro",children:"components"})," (",(0,s.jsx)(t.strong,{children:"final result"}),") which should be present on the entity, above ",(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/Merger#desiredvelocitycomponent",children:(0,s.jsx)(t.code,{children:"DesiredVelocityComponent"})}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"behavior---merger-compatibility",children:"Behavior - Merger Compatibility"}),"\n",(0,s.jsxs)(t.p,{children:["If a merger is declared as accepting ",(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,s.jsx)(t.code,{children:"VelocityResults"})})," and a behavior as outputting ",(0,s.jsx)(t.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,s.jsx)(t.code,{children:"VelocityResults"})}),", then they are compatible. When a merger is selected in the ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/editor",children:"editor"}),", only compatible behaviors will be shown as possibilities. This prevents issues when casting from the ",(0,s.jsx)(t.code,{children:"IDelayedDisposable"}),". As usual, the ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/editor",children:"editor"})," will also add whichever ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/components/intro",children:"component"})," is declared in the ",(0,s.jsx)(t.a,{href:"/docs/documentation-core/attributes#jobwrapperattribute",children:(0,s.jsx)(t.code,{children:"[JobWrapper]"})})," as the entity's dependency."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>n,x:()=>c});var s=r(6540);const o={},i=s.createContext(o);function n(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);