"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2166],{6865:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=a(4848),n=a(8453);a(6025);const s={sidebar_position:1},i="ICreateRaysJobWrapper",o={id:"documentation-core/queries/ray_queries/ray-queries",title:"ICreateRaysJobWrapper",description:"Implementations of ICreateRaysJobWrapper create NumRays RayCommands per each entity. The rays are then cast by the BaseSteeringSystem in the background. The results of these raycasts are then passed into ray behaviors.",source:"@site/docs/4_documentation-core/5_queries/1_ray_queries/1_ray-queries.mdx",sourceDirName:"4_documentation-core/5_queries/1_ray_queries",slug:"/documentation-core/queries/ray_queries/ray-queries",permalink:"/docs/documentation-core/queries/ray_queries/ray-queries",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/documentation-core/queries/ray_queries/overview"},next:{title:"Entity Queries",permalink:"/docs/documentation-core/queries/entity-queries"}},c={},d=[{value:"Implementing a Ray Query",id:"implementing-a-ray-query",level:2},{value:"ICreateRaysJob",id:"icreateraysjob",level:2}];function h(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"icreateraysjobwrapper",children:"ICreateRaysJobWrapper"})}),"\n",(0,t.jsxs)(r.p,{children:["Implementations of ",(0,t.jsx)(r.code,{children:"ICreateRaysJobWrapper"})," create ",(0,t.jsx)(r.code,{children:"NumRays"})," ",(0,t.jsx)(r.a,{href:"https://docs.unity3d.com/ScriptReference/RaycastCommand.html",children:"RayCommand"}),"s per each entity. The rays are then cast by the ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,t.jsx)(r.code,{children:"BaseSteeringSystem"})})," in the background. The results of these ",(0,t.jsx)(r.a,{href:"https://docs.unity3d.com/Packages/com.unity.physics@1.3/manual/collision-queries.html#ray-casts",children:"raycasts"})," are then passed into ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/behaviors/ray-behaviors/overview",children:"ray behaviors"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"implementing-a-ray-query",children:"Implementing a Ray Query"}),"\n",(0,t.jsxs)(r.p,{children:["To implement your own ray query, create a class implementing the ",(0,t.jsx)(r.code,{children:"ICreateRaysJobWrapper"})," interface. Mark it with ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/attributes#jobwrapperattribute",children:(0,t.jsx)(r.code,{children:"[JobWrapper]"})}),", this will make it show up in the editor. The schedule method is expected to schedule a job which creates ",(0,t.jsx)(r.code,{children:"NumRays"})," rays for each entity. There is helper custom job prepared to ease this process - ",(0,t.jsx)(r.code,{children:"ICreateRaysJob"}),". The code below can be used as template to create new ray queries."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",metastring:'title="MyNeighborQueryJobWrapper.cs"',children:"[JobWrapper]\r\n[Serializable]\r\npublic class MyCreateRaysJobWrapper : ICreateRaysJobWrapper\r\n{\r\n    public JobHandle Schedule(\r\n        SystemBase systemBase,\r\n        in CreateRaysParams createRaysParams,\r\n        in NativeArray<RayData> rayDatas,\r\n        JobHandle dependency)\r\n    {\r\n        return new MyCreateRaysJob\r\n        {\r\n            MaxDistance = createRaysParams.RaySettings.MaxDistance,\r\n        }.Schedule(\r\n            createRaysParams,\r\n            rayDatas,\r\n            1,\r\n            dependency);\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"icreateraysjob",children:"ICreateRaysJob"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"ICreateRaysJob"})," is a custom job which makes implementing a job to create rays easier. It's ",(0,t.jsx)(r.code,{children:"Execute"})," method will be called ",(0,t.jsx)(r.code,{children:"NumRays"})," times with indexes from ",(0,t.jsx)(r.code,{children:"0"})," to ",(0,t.jsx)(r.code,{children:"NumRays - 1"})," for each entity. The function should return the origin, direction and maximum distance of a ray to cast. Internally, the job makes sure that ",(0,t.jsx)(r.code,{children:"rayDatas"})," are filled in format expected by ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/behaviors/ray-behaviors/overview",children:"ray behaviors"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",metastring:'title="MyNeighborQueryJobWrapper.cs"',children:"[BurstCompile]\r\nstruct MyCreateRaysJob : ICreateRaysJob\r\n{\r\n    public float MaxDistance;\r\n\t\t\r\n    public RayData Execute(\r\n        int rayIndex,\r\n        in EntityInformation<SteeringEntityTagComponent> entityInformation)\r\n    {\r\n        \r\n        // highlight-next-line\r\n        float3 direction = ... // Calculate direction based on rayIndex\r\n\t\t\t\r\n        return new RayData\r\n        {\r\n            Origin = entityInformation.Position,\r\n            Direction = ,\r\n            MaxDistance = MaxDistance\r\n        };\r\n    }\r\n}\n"})})]})}function l(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,r,a)=>{a.d(r,{R:()=>i,x:()=>o});var t=a(6540);const n={},s=t.createContext(n);function i(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);