"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3287],{5912:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>n,metadata:()=>a,toc:()=>h});var t=o(4848),i=o(8453);const n={sidebar_position:0},s="ISimpleBehaviorJobWrapper",a={id:"documentation-core/behaviors/simple-behaviors/ISimpleBehaviorJob",title:"ISimpleBehaviorJobWrapper",description:"Simple behaviors are implementations of ISimpleBehaviorJobWrapper. The BaseSteeringSystem schedules them after querying the entities with the main entity query. There are three interfaces relevant in creating a simple behavior. The most important one is a custom job ISimpleBehaviorJob which significantly simplifies creating the behaviors.",source:"@site/docs/4_documentation-core/6_behaviors/0_simple-behaviors/1_ISimpleBehaviorJob.mdx",sourceDirName:"4_documentation-core/6_behaviors/0_simple-behaviors",slug:"/documentation-core/behaviors/simple-behaviors/ISimpleBehaviorJob",permalink:"/Steering-AI-Documentation/docs/documentation-core/behaviors/simple-behaviors/ISimpleBehaviorJob",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/Steering-AI-Documentation/docs/documentation-core/behaviors/simple-behaviors/overview"},next:{title:"Neighbor Behaviors",permalink:"/Steering-AI-Documentation/docs/category/neighbor-behaviors"}},c={},h=[{value:"Implementing ISimpleBehaviorJobWrapper",id:"implementing-isimplebehaviorjobwrapper",level:2},{value:"Attributes",id:"attributes",level:3},{value:"ISimpleBehaviorJob&lt;C, R&gt;",id:"isimplebehaviorjobc-r",level:2},{value:"Generic Parameters",id:"generic-parameters",level:3}];function l(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"isimplebehaviorjobwrapper",children:"ISimpleBehaviorJobWrapper"})}),"\n",(0,t.jsxs)(r.p,{children:["Simple behaviors are implementations of ",(0,t.jsx)(r.code,{children:"ISimpleBehaviorJobWrapper"}),". The ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/base-system/BaseSteeringSystem",children:(0,t.jsx)(r.code,{children:"BaseSteeringSystem"})})," schedules them after querying the entities with the main ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/queries/entity-queries",children:"entity query"}),". There are three interfaces relevant in creating a simple behavior. The most important one is a ",(0,t.jsx)(r.a,{href:"https://docs.unity3d.com/Packages/com.unity.jobs@0.0/manual/custom_job_types.html",children:"custom job"})," ",(0,t.jsx)(r.code,{children:"ISimpleBehaviorJob<C, R>"})," which significantly simplifies creating the behaviors."]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"/docs/documentation-core/behaviors/simple-behaviors/ISimpleBehaviorJob#implementing-isimplebehaviorjobwrapper",children:(0,t.jsx)(r.code,{children:"ISimpleBehaviorJobWrapper"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Schedule"})," should schedule a job which writes ",(0,t.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,t.jsx)(r.code,{children:"VelocityResult"})}),"s to ",(0,t.jsx)(r.code,{children:"results"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"/docs/documentation-core/behaviors/simple-behaviors/ISimpleBehaviorJob#isimplebehaviorjobc-r",children:(0,t.jsx)(r.code,{children:"ISimpleBehaviorJob<C, R>"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Execute"})," method should return a single ",(0,t.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,t.jsx)(r.code,{children:"VelocityResult"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"/docs/documentation-core/components/ISimpleBaseBehavior",children:(0,t.jsx)(r.code,{children:"ISimpleBaseBehavior"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["entities used by ",(0,t.jsx)(r.code,{children:"ISimpleBehaviorJob<C, R>"})," must have a component implementing this interface."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"implementing-isimplebehaviorjobwrapper",children:"Implementing ISimpleBehaviorJobWrapper"}),"\n",(0,t.jsxs)(r.p,{children:["Below is the implementation of the ",(0,t.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/simple-behaviors/go-foward",children:(0,t.jsx)(r.code,{children:"GoForwardJobWrapper"})}),". It can be easily used as a template to create your own behavior. The ",(0,t.jsx)(r.code,{children:"Schedule"})," method receives information about the entities inside ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/base-system/BaseBehaviorParams",children:(0,t.jsx)(r.code,{children:"BaseBehaviorParams"})}),". It should allocate an object of the type specified in ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/attributes#outdataattribute",children:(0,t.jsx)(r.code,{children:"[OutData]"})})," and assign it to ",(0,t.jsx)(r.code,{children:"out results"}),". The behavior should write one ",(0,t.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,t.jsx)(r.code,{children:"VelocityResult"})})," per entity into ",(0,t.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,t.jsx)(r.code,{children:"VelocityResults"})}),". Here the ",(0,t.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/simple-behaviors/go-foward#goforwardjob",children:(0,t.jsx)(r.code,{children:"GoForwardJob"})})," is resposible for that."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",metastring:'title="GoForwardJobWrapper.cs"',children:"[JobWrapper(typeof(GoForwardComponent))]\r\n[OutData(typeof(VelocityResults))]\r\npublic class GoForwardJobWrapper : ISimpleBehaviorJobWrapper\r\n{\r\n    public JobHandle Schedule(\r\n        SystemBase systemBase,\r\n        in BaseBehaviorParams baseBehaviorParams,\r\n        out IDelayedDisposable results,\r\n        in JobHandle dependency)\r\n    {\r\n        // Create new object to hold the results, should be same as declared in OutData\r\n        results = new VelocityResults(baseBehaviorParams.EntityCount);\r\n            \r\n        // Scheduling GoForwardJob\r\n        var outDependency = new GoForwardJob\r\n        {\r\n        }.Schedule<GoForwardJob, GoForwardComponent, VelocityResult>(\r\n            systemBase,\r\n            baseBehaviorParams,\r\n            (VelocityResults)results,\r\n            1,\r\n            dependency);\r\n            \r\n        return outDependency;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"attributes",children:"Attributes"}),"\n",(0,t.jsxs)(r.p,{children:["This job wrapper uses two attributes. First declares what type of object the behavior returns. Second declares which components are expected on the entity. The types from the attributes are used in the ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/editor",children:"editor"})," of the ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/base-system/SteeringSystemAsset",children:(0,t.jsx)(r.code,{children:"SteeringSystemAsset"})}),"."]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"/docs/documentation-core/attributes#outdataattribute",children:(0,t.jsx)(r.code,{children:"[OutData]"})})," - Declares what type of results the behavior creates, above ",(0,t.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/VelocityResult",children:(0,t.jsx)(r.code,{children:"VelocityResults"})}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"/docs/documentation-core/attributes#jobwrapperattribute",children:(0,t.jsx)(r.code,{children:"[JobWrapper]"})})," - Declares which components should be present on the entity, above ",(0,t.jsx)(r.a,{href:"/docs/documentation-defaults/behaviors/simple-behaviors/go-foward#goforwardcomponent",children:(0,t.jsx)(r.code,{children:"GoForwardComponent"})}),"."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["The correct way to match the type arguments with generic parameters to ",(0,t.jsx)(r.code,{children:"ISimpleBehaviorJob<C, R>"})," is the following:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.code,{children:"[JobWrapper(typeof(C))]"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.code,{children:"[OutData(typeof(R))]"})}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"isimplebehaviorjobc-r",children:"ISimpleBehaviorJob<C, R>"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"ISimpleBehaviorJob<C, R>"})," simplifies creation of new simple behaviors. For each entity, the ",(0,t.jsx)(r.code,{children:"Execute"})," is called once, passing in information about the entity in the ",(0,t.jsx)(r.code,{children:"behaviorData"})," parameter. The method returns a result of type ",(0,t.jsx)(r.code,{children:"R"}),". Internally the result is then written into the ",(0,t.jsx)(r.code,{children:"results"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"generic-parameters",children:"Generic Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"C"})," - Type of component on the main entities implementing ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/components/ISimpleBaseBehavior",children:(0,t.jsx)(r.code,{children:"ISimpleBaseBehavior"})})," - should match the argument of ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/attributes#jobwrapperattribute",children:(0,t.jsx)(r.code,{children:"[JobWrapper]"})}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"R"})," - Type of result returned from the behavior - should match the argument of ",(0,t.jsx)(r.a,{href:"/docs/documentation-core/attributes#outdataattribute",children:(0,t.jsx)(r.code,{children:"[OutData]"})}),"."]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",metastring:'title="GoForwardJobWrapper.cs"',children:"[BurstCompile]\r\nstruct GoForwardJob : ISimpleBehaviorJob<GoForwardComponent, VelocityResult>\r\n{\r\n    public VelocityResult Execute(EntityInformation<GoForwardComponent> entity)\r\n    // highlight-start\r\n    {\r\n        // Create a new result, implement your own behavior here instead\r\n        var result = new VelocityResult(\r\n            entity.Forward,                                 // Going forward in the current facing direction\r\n            entity.Component.BaseData.DirectionStrength,    // How much I want to go in that direction\r\n            entity.Component.Speed,                         // At what speed I want to go in that direction\r\n            entity.Component.BaseData.SpeedStrength,        // How much I want to go at that speed\r\n            entity.Component.BaseData.Priority);            // The priority of this behavior\r\n            \r\n        return result;\r\n    }\r\n    // highlight-end\r\n}\n"})}),"\n",(0,t.jsx)(r.admonition,{type:"tip",children:(0,t.jsxs)(r.p,{children:["You can just copy and paste this, then change all occurences of ",(0,t.jsx)(r.code,{children:"GoForward"})," to ",(0,t.jsx)(r.code,{children:"MyBehaviorName"})," to create a new behavior quickly. The only thing to implement is the ",(0,t.jsx)(r.code,{children:"Execute"})," method. See other ",(0,t.jsx)(r.a,{href:"/docs/category/simple-behaviors-1",children:"default behaviors"})," to understand more complex examples."]})})]})}function d(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,o)=>{o.d(r,{R:()=>s,x:()=>a});var t=o(6540);const i={},n=t.createContext(i);function s(e){const r=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);