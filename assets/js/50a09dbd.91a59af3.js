"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3086],{8531:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>n,metadata:()=>a,toc:()=>d});var s=r(4848),t=r(8453);r(6025);const n={sidebar_position:1},o="KD Tree KNN",a={id:"documentation-defaults/queries/neighbor-queries/kd-tree-knn",title:"KD Tree KNN",description:"For each entity finds maximum of MaxNumNeighbors within radius MaxNeighborDistance. It's also possible to limit the field of view with MaxFOV. Functionally it is exactly the same as SpacialHashKNNJobWrapper. The only difference is in the data structure used. Usually, SpacialHashKNNJobWrapper provides better performance, but proper profiling is always necessary.",source:"@site/docs/5_documentation-defaults/2_queries/neighbor-queries/1_kd-tree-knn.mdx",sourceDirName:"5_documentation-defaults/2_queries/neighbor-queries",slug:"/documentation-defaults/queries/neighbor-queries/kd-tree-knn",permalink:"/docs/documentation-defaults/queries/neighbor-queries/kd-tree-knn",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Neighbor Queries",permalink:"/docs/category/neighbor-queries-1"},next:{title:"Spacial Hash KNN",permalink:"/docs/documentation-defaults/queries/neighbor-queries/spacial-hash-knn"}},c={},d=[];function u(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",header:"header",p:"p",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"kd-tree-knn",children:"KD Tree KNN"})}),"\n",(0,s.jsxs)(i.p,{children:["For each entity finds maximum of ",(0,s.jsx)(i.code,{children:"MaxNumNeighbors"})," within radius ",(0,s.jsx)(i.code,{children:"MaxNeighborDistance"}),". It's also possible to limit the field of view with ",(0,s.jsx)(i.code,{children:"MaxFOV"}),". Functionally it is exactly the same as ",(0,s.jsx)(i.a,{href:"/docs/documentation-defaults/queries/neighbor-queries/spacial-hash-knn",children:(0,s.jsx)(i.code,{children:"SpacialHashKNNJobWrapper"})}),". The only difference is in the data structure used. Usually, ",(0,s.jsx)(i.a,{href:"/docs/documentation-defaults/queries/neighbor-queries/spacial-hash-knn",children:(0,s.jsx)(i.code,{children:"SpacialHashKNNJobWrapper"})})," provides better performance, but proper profiling is always necessary."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsxs)(i.em,{children:["The code is based on public ",(0,s.jsx)(i.a,{href:"https://github.com/ArthurBrussee/KNN",children:"github repository"})," by ",(0,s.jsx)(i.a,{href:"https://github.com/ArthurBrussee",children:"ArthurBrussee"}),"."]})}),"\n",(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"/docs/documentation-core/queries/neighbor_queries/overview",children:"Neighbor queries"})," can easily cost most of the resources needed to run a steering system. Try to limit the ",(0,s.jsx)(i.code,{children:"MaxNumNeighbors"})," to minimum."]})})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,i,r)=>{r.d(i,{R:()=>o,x:()=>a});var s=r(6540);const t={},n=s.createContext(t);function o(e){const i=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(n.Provider,{value:i},e.children)}}}]);